<?php

/**
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category Pay2
 * @package Pay2_Pix
 * @copyright Copyright (c) 2022 NobleCommerce
 * @author NobleCommerce <hello@noblecommerce.io>
 *
 * See LICENSE.md for license details.
 */

declare(strict_types=1);

namespace Pay2\Pix\Gateway\Response\Handler;

use Magento\Payment\Gateway\Data\PaymentDataObjectInterface;
use Magento\Payment\Gateway\Response\HandlerInterface;
use Magento\Sales\Api\OrderRepositoryInterface;
use Magento\Sales\Api\InvoiceRepositoryInterface;
use Magento\Sales\Api\OrderPaymentRepositoryInterface;
use Magento\Sales\Model\Order;
use Magento\Sales\Model\Order\Invoice;
use Magento\Sales\Model\Order\Payment;
use Magento\Sales\Model\Service\InvoiceService;

class UpdateStatus implements HandlerInterface
{

    /**
     * @var OrderPaymentRepositoryInterface
     */
    protected $paymentRepository;

    /**
     * @var OrderRepositoryInterface
     */
    protected $orderRepository;

    /**
     * @var InvoiceRepositoryInterface
     */
    protected $invoiceRepository;

    /**
     * @var InvoiceService
     */
    protected $invoiceService;

    /**
     * @param \Magento\Sales\Api\OrderPaymentRepositoryInterface $paymentRepository
     * @param \Magento\Sales\Api\OrderRepositoryInterface $orderRepository
     * @param \Magento\Sales\Api\InvoiceRepositoryInterface $invoiceRepository
     * @param \Magento\Sales\Model\Service\InvoiceService $invoiceService
     */
    public function __construct(
        OrderPaymentRepositoryInterface $paymentRepository,
        OrderRepositoryInterface $orderRepository,
        InvoiceRepositoryInterface $invoiceRepository,
        InvoiceService $invoiceService
    ) {
        $this->paymentRepository = $paymentRepository;
        $this->orderRepository = $orderRepository;
        $this->invoiceRepository = $invoiceRepository;
        $this->invoiceService = $invoiceService;
    }

    /**
     * @param array $handlingSubject
     * @param array $response
     */
    public function handle(array $handlingSubject, array $response)
    {
        /** @var PaymentDataObjectInterface $paymentDataObject */
        $paymentDataObject = $handlingSubject['payment'];

        /** @var Payment $payment */
        $payment = $paymentDataObject->getPayment();

        $data = $response['data']['callback_raw_data'] ?? [];
        $status = strtoupper($data['financialStatement']['status'] ?? '');

        if (!$status) {
            return;
        }

        // Status
        $payment->setAdditionalInformation('status', $status);

        // Transaction information
        $payment->setLastTransId($data['transactionId']);
        $payment->setTransactionId($data['transactionId']);
        $payment->setIsTransactionClosed((bool) $status === 'APPROVED');

        // Pix information
        if ($status === 'APPROVED') {
            $payment->setAdditionalInformation('qr_code_image', '');
        }

        // Response details
        $details = $response['data'];
        unset($details['raw_data']['data']['instantPayment']['generateImage']);
        $payment->setTransactionAdditionalInfo('details', $details);

        $this->paymentRepository->save($payment);

        // Generate invoice if approved
        if ($status === 'APPROVED') {
            $order = $paymentDataObject->getOrder();
            $this->generateInvoice($order->getId());
        }
    }

    /**
     * @param int $orderId
     * @return bool
     */
    public function generateInvoice($orderId)
    {

        /** @var Order $order */
        $order = $this->orderRepository->get($orderId);

        if (!$order->canInvoice()) {
            return false;
        }

        $invoice = $this->invoiceService->prepareInvoice($order);
        $invoice->setRequestedCaptureCase(Invoice::CAPTURE_ONLINE);
        $invoice->register();
        $invoice->pay();
        $invoice->setTransactionId($order->getPayment()->getLastTransId());

        $this->invoiceRepository->save($invoice);

        if( $order->getState() === Order::STATE_NEW ){
            $order->setState(Order::STATE_PROCESSING);
        }

        $order->addStatusToHistory(
            Order::STATE_PROCESSING,
            __('The payment transaction was paid.'),
            false
        );

        $this->orderRepository->save($order);
    }
}
