<?php

/**
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category Pay2
 * @package Pay2_Pix
 * @copyright Copyright (c) 2022 NobleCommerce
 * @author NobleCommerce <hello@noblecommerce.io>
 *
 * See LICENSE.md for license details.
 */

declare(strict_types=1);

namespace Pay2\Pix\Gateway\Request\Builder;

use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Phrase;
use Magento\Payment\Gateway\Data\PaymentDataObjectInterface;
use Magento\Payment\Gateway\Request\BuilderInterface;
use Magento\Sales\Model\Order\Payment as OrderPayment;
use Magento\Store\Model\StoreManagerInterface;
use Pay2\Pix\Gateway\Config\Config;

class Payment implements BuilderInterface
{

    /**
     * @var StoreManagerInterface
     */
    protected $storeManager;

    /**
     * @var Config
     */
    protected $config;

    /**
     * @param \Magento\Store\Model\StoreManagerInterface $storeManager
     * @param \Pay2\Pix\Gateway\Config\Config $config
     */
    public function __construct(StoreManagerInterface $storeManager, Config $config)
    {
        $this->storeManager = $storeManager;
        $this->config = $config;
    }

    /**
     * @param array $buildSubject
     * @return array
     * @throws LocalizedException
     */
    public function build(array $buildSubject)
    {
        /** @var PaymentDataObjectInterface $paymentDataObject */
        $paymentDataObject = $buildSubject['payment'];

        /** @var OrderPayment $payment */
        $payment = $paymentDataObject->getPayment();
        $order = $payment->getOrder();

        $storeId = $order->getStoreId();
        $store = $this->storeManager->getStore($storeId);
        $expirationInSeconds = $this->config->getExpireTime() * 60;

        $data = [
            'payment' => [
                'total_amount' => $this->getTransactionValue($buildSubject),
                'expiration' => $expirationInSeconds,
                'account_id' => $this->config->getAccountId(),
                'external_identifier' => $order->getIncrementId(),
                'store_name' => $store->getName(),
                'message' => (string) __('Order #%1 in store %2', $order->getIncrementId(), $store->getName())
            ]
        ];

        return $data;
    }

    /**
     * @param array $buildSubject
     * @return string
     * @throws LocalizedException
     */
    protected function getTransactionValue(array $buildSubject)
    {
        $amount = (float) $buildSubject['amount'] ?? 0;

        if ($amount <= 0) {
            throw new LocalizedException(
                new Phrase(
                    __('The amount to be paid must be greater than 0.')
                )
            );
        }

        return $amount;
    }
}
