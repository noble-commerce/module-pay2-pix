<?php

/**
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category Pay2
 * @package Pay2_Pix
 * @copyright Copyright (c) 2022 NobleCommerce
 * @author NobleCommerce <hello@noblecommerce.io>
 *
 * See LICENSE.md for license details.
 */

declare(strict_types=1);

namespace Pay2\Pix\Cron;

use Magento\Framework\DB\Adapter\AdapterInterface;
use Magento\Framework\DB\Select;
use Magento\Payment\Gateway\Command\CommandManagerPoolInterface;
use Magento\Sales\Api\OrderPaymentRepositoryInterface;
use Magento\Sales\Api\OrderRepositoryInterface;
use Magento\Sales\Api\OrderManagementInterface;
use Magento\Sales\Model\Order;
use Magento\Sales\Model\ResourceModel\Order as OrderResource;
use Pay2\Pix\Gateway\Config\Config;
use Pay2\Pix\Model\Checkout\ConfigProvider;
use Psr\Log\LoggerInterface;

class UpdateOrderStatus
{

    /**
     * @var Config
     */
    protected $config;

    /**
     * @var OrderPaymentRepositoryInterface
     */
    protected $paymentRepository;

    /**
     * @var OrderResource
     */
    protected $orderResource;

    /**
     * @var OrderRepositoryInterface
     */
    protected $orderRepository;

    /**
     * @var OrderManagementInterface
     */
    protected $orderManagement;

    /**
     * @var CommandManagerPoolInterface
     */
    protected $commandManagerPool;

    /**
     * @var LoggerInterface
     */
    protected $logger;

    /**
     * @param \Pay2\Pix\Gateway\Config\Config $config
     * @param \Magento\Sales\Api\OrderPaymentRepositoryInterface $paymentRepository
     * @param \Magento\Sales\Model\ResourceModel\Order $orderResource
     * @param \Magento\Sales\Api\OrderRepositoryInterface $orderRepository
     * @param \Magento\Sales\Api\OrderManagementInterface $orderManagement
     * @param \Magento\Payment\Gateway\Command\CommandManagerPoolInterface $commandManagerPool
     * @param \Psr\Log\LoggerInterface $logger
     */
    public function __construct(
        Config $config,
        OrderPaymentRepositoryInterface $paymentRepository,
        OrderResource $orderResource,
        OrderRepositoryInterface $orderRepository,
        OrderManagementInterface $orderManagement,
        CommandManagerPoolInterface $commandManagerPool,
        LoggerInterface $logger
    ) {
        $this->config = $config;
        $this->paymentRepository = $paymentRepository;
        $this->orderResource = $orderResource;
        $this->orderRepository = $orderRepository;
        $this->orderManagement = $orderManagement;
        $this->commandManagerPool = $commandManagerPool;
        $this->logger = $logger;
    }

    /**
     * @inheritDoc
     * @return void
     */
    public function execute()
    {

        if (!$this->config->getActive()) {
            return;
        }

        try {
            $orders = $this->getPendingOrders();
            $idField = $this->orderResource->getIdFieldName();

            foreach ($orders as $orderInfo) {

                $orderId = (int) $orderInfo[$idField];

                /** @var Order $order */
                $order = $this->orderRepository->get($orderId);

                // Get new order status
                $this->processOrder($order);

                // Cancel order if necessary
                if ($this->isOrderExpired($order)) {
                    $this->cancelOrder($order);
                }
            }
        } catch (\Exception $e) {
            $this->logger->critical($e->getMessage());
        }
    }

    /**
     * Retrieve pending orders
     * @return array
     */
    public function getPendingOrders()
    {

        /** @var AdapterInterface $adapter */
        $adapter = $this->orderResource->getConnection();
        $idField = $this->orderResource->getIdFieldName();

        $orderStatus = ['pending', 'pending_payment'];
        $paymentMethod = ConfigProvider::CODE;

        /** @var Select $select */
        $select = $adapter->select();
        $select->from(
            ['main_table' => $this->orderResource->getMainTable()],
            [$idField, 'created_at', 'status']
        )
            ->joinLeft(
                ['sop' => $this->orderResource->getTable('sales_order_payment')],
                'main_table.entity_id = sop.parent_id',
                ['method']
            )
            ->where('main_table.status IN (?)', $orderStatus)
            ->where('sop.method = ?', $paymentMethod);

        return $adapter->fetchAll($select);
    }

    /**
     * Retrieve if order has been expired
     * @param Order $order
     * @return boolean
     */
    public function isOrderExpired($order)
    {
        $payment = $order->getPayment();
        $transactionStatus = $payment->getAdditionalInformation('status');

        // Only expire pending transaction status
        if ($transactionStatus !== 'CREATED') {
            return false;
        }

        // Add 1 minute as additional delay callback to determine expire time
        $expireTime = ($this->config->getExpireTime() + 1) * 60;
        $createdAt = new \DateTime($order->getCreatedAt());
        $secondsSinceCreated = round(time() - $createdAt->getTimestamp());

        return $secondsSinceCreated > $expireTime;
    }

    /**
     * Process order
     * @param Order $order
     * @return void
     */
    public function processOrder($order)
    {
        try {
            $payment = $order->getPayment();
            $arguments = [];

            $commandManager = $this->commandManagerPool->get(ConfigProvider::CODE);
            $commandManager->executeByCode('notification', $payment, $arguments);
        } catch (\Exception $e) {
            $this->logger->critical($e->getMessage());
        }
    }

    /**
     * Cancel order
     * @param Order $order
     * @return void
     */
    public function cancelOrder($order)
    {
        try {
            if (!$order->canCancel()) {
                return;
            }

            $payment = $order->getPayment();
            $payment->setAdditionalInformation('qr_code_image', '');
            $payment->setAdditionalInformation('status', 'EXPIRED');
            $this->paymentRepository->save($payment);

            $this->orderManagement->cancel($order->getEntityId());
        } catch (\Exception $e) {
            $this->logger->critical($e->getMessage());
        }
    }
}
