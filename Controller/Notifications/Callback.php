<?php

/**
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category Pay2
 * @package Pay2_Pix
 * @copyright Copyright (c) 2022 NobleCommerce
 * @author NobleCommerce <hello@noblecommerce.io>
 *
 * See LICENSE.md for license details.
 */

declare(strict_types=1);

namespace Pay2\Pix\Controller\Notifications;

use Magento\Framework\App\Action\HttpPostActionInterface;
use Magento\Framework\Controller\Result\JsonFactory;
use Magento\Framework\DB\Adapter\AdapterInterface;
use Magento\Framework\DB\Select;
use Magento\Framework\Webapi\Rest\Request;
use Magento\Payment\Gateway\Command\CommandManagerPoolInterface;
use Magento\Sales\Api\OrderRepositoryInterface;
use Magento\Sales\Model\ResourceModel\Order as OrderResource;
use Pay2\Pix\Model\Checkout\ConfigProvider;
use Psr\Log\LoggerInterface;

class Callback implements HttpPostActionInterface
{

    /**
     * @var OrderResource
     */
    protected $orderResource;

    /**
     * @var OrderRepositoryInterface
     */
    protected $orderRepository;

    /**
     * @var CommandManagerPoolInterface
     */
    protected $commandManagerPool;

    /**
     * @var Request
     */
    protected $request;

    /**
     * @var JsonFactory
     */
    protected $resultJsonFactory;

    /**
     * @var LoggerInterface
     */
    protected $logger;

    /**
     * @param \Magento\Sales\Model\ResourceModel\Order $orderResource
     * @param \Magento\Sales\Api\OrderRepositoryInterface $orderRepository
     * @param \Magento\Payment\Gateway\Command\CommandManagerPoolInterface $commandManagerPool
     * @param \Magento\Framework\Webapi\Rest\Request $request
     * @param \Magento\Framework\Controller\Result\JsonFactory $resultJsonFactory
     * @param \Psr\Log\LoggerInterface $logger
     */
    public function __construct(
        OrderResource $orderResource,
        OrderRepositoryInterface $orderRepository,
        CommandManagerPoolInterface $commandManagerPool,
        Request $request,
        JsonFactory $resultJsonFactory,
        LoggerInterface $logger
    ) {
        $this->orderResource = $orderResource;
        $this->orderRepository = $orderRepository;
        $this->commandManagerPool = $commandManagerPool;
        $this->request = $request;
        $this->resultJsonFactory = $resultJsonFactory;
        $this->logger = $logger;
    }

    /**
     * Execute method
     * @return void
     */
    public function execute()
    {

        $result = $this->resultJsonFactory->create();
        $body = $this->request->getBodyParams();
        $identifier = isset($body['external_identifier']) ? $body['external_identifier'] : '';

        if (!$identifier) {
            $identifier = $this->request->getParam('external_identifier');
        }

        try {

            if (!$identifier) {
                throw new \Exception("Missing external identifier.");
            }

            $orderId = $this->getOrderIdByIncrementId($identifier);
            $order = $this->orderRepository->get($orderId);
            $payment = $order->getPayment();
            $arguments = [];

            $commandManager = $this->commandManagerPool->get(ConfigProvider::CODE);
            $commandManager->executeByCode('notification', $payment, $arguments);
        } catch (\Exception $e) {
            $this->logger->critical($e->getMessage());
            return $result->setData(array(
                'ok' => false
            ));
        }

        return $result->setData(array(
            'ok' => true
        ));
    }

    /**
     * Get order id by order increment id
     * @param string|int $incrementId
     * @return int
     */
    public function getOrderIdByIncrementId($incrementId)
    {

        /** @var AdapterInterface $adapter */
        $adapter = $this->orderResource->getConnection();
        $bind = [':increment_id' => $incrementId];

        /** @var Select $select */
        $select = $adapter->select();
        $select->from(
            $this->orderResource->getMainTable(),
            $this->orderResource->getIdFieldName()
        )->where('increment_id = :increment_id');

        $entityId = $adapter->fetchOne($select, $bind);

        if ($entityId > 0) {
            $orderId = (int)$entityId;
        } else {
            $orderId = 0;
        }

        return $orderId;
    }
}
